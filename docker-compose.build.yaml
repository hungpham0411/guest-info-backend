version: "3.3"
services:

  backend-server:
    image: backend-server
    build: .
    ports:
      - 10350:10350
    environment:
      BASE_URL: http://localhost:10350/
      MONGO_URI: mongodb://backend-database
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/?connection_attempts=5&retry_delay=5
    networks:
      - backend-network
    depends_on:
      - backend-database
      - rabbitmq

  backend-database:
    image: mongo:4
    networks:
      - backend-network

# https://docs.docker.com/compose/compose-file/
  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    networks:
      -  backend-network
  
  test-runner:
    image: test-runner:dev
    build: testing/test-runner
    environment:
      SUT_BASE_URL: http://backend-server:10350/
      SUT_MONGO_URL: mongodb://backend-database
      SUT_MONGO_DATABASE: guests
      SUT_MONGO_COLLECTION: guests
      TEST_TIMEOUT_MS: 5000
    volumes:
      - type: bind
        source: ./testing/test
        target: /usr/src/app/test
        read_only: true
      - type: bind
        source: ./lib
        target: /usr/src/app/lib
        read_only: true
    networks:
      - backend-network
    depends_on:
      - backend-server

networks:
  backend-network: